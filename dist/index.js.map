{"version":3,"file":"index.js","sources":["../src/types/AuthenticationState.ts","../src/recoil/authenticationAtom.ts","../src/recoil/usersAtom.ts","../src/recoil/useAuthenticatedUser.tsx","../src/firebase/authentication/subscribeForAuthenticatedUser.ts","../src/firebase/users/subscribeForUser.ts","../src/Authenticate.tsx","../src/FirebaseInit.tsx","../src/firebase/users/createUser.ts","../src/types/MinimalExpectedDatabase.ts","../src/types/MinimalUser.ts","../src/firebase/authentication/signIn.ts","../src/firebase/authentication/signOut.ts","../src/firebase/authentication/signUp.ts","../src/firebase/users/updateUser.ts"],"sourcesContent":["import * as firebase from 'firebase/app';\nimport produce from 'immer';\n\nexport interface AuthenticationState {\n    firebaseUser: firebase.User | undefined | null;\n    loading: boolean;\n}\n\nexport function createAuthenticationState(values?: Partial<AuthenticationState>): Readonly<AuthenticationState> {\n    const newObject: AuthenticationState = produce(\n        {\n            firebaseUser: undefined,\n            loading: true\n        },\n        (draft) => {\n            Object.assign(draft, values);\n        }\n    );\n    return newObject;\n}\n\nexport function isAuthenticationState(value: unknown): value is AuthenticationState {\n    const castedValue = value as AuthenticationState;\n    return castedValue.loading != null;\n}\n","import { atom } from 'recoil';\nimport { AuthenticationState, createAuthenticationState } from '../types';\n\nexport const authenticationAtom = atom<AuthenticationState>({\n    key: 'authenticationAtom',\n    default: createAuthenticationState(),\n    dangerouslyAllowMutability: true\n});\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { atom } from 'recoil';\nimport { MinimalUserData } from '../types/MinimalUser';\nimport { Document } from '@bma98/firebase-db-manager';\n\nexport const usersAtom = atom({\n    key: 'usersAtom',\n    default: new Map<string, Document<MinimalUserData, any>>()\n});\n","import { useRecoilValue } from 'recoil';\nimport { usersAtom } from './usersAtom';\nimport { authenticationAtom } from './authenticationAtom';\nimport { MinimalUserData } from '..';\nimport { Document } from '@bma98/firebase-db-manager';\n\nexport function useAuthenticatedUser(): Document<MinimalUserData, null> | undefined {\n    const users = useRecoilValue(usersAtom);\n    const auth = useRecoilValue(authenticationAtom);\n    if (auth.firebaseUser != null && users.has(auth.firebaseUser.uid)) {\n        return users.get(auth.firebaseUser.uid);\n    }\n    return undefined;\n}\n","import * as firebase from 'firebase/app';\nimport 'firebase/auth';\nimport { AuthenticationState, createAuthenticationState } from '../../types/AuthenticationState';\n\nexport function subscribeForAuthenticatedUser(onFetch: (state: AuthenticationState) => void): firebase.Unsubscribe {\n    return firebase.auth().onAuthStateChanged(\n        (user) => {\n            onFetch(\n                createAuthenticationState({\n                    firebaseUser: user,\n                    loading: false\n                })\n            );\n        },\n        (error) => {\n            alert(error.message);\n        }\n    );\n}\n","import firebase from 'firebase/app';\nimport { MinimalExpectedDatabase } from '../../types/MinimalExpectedDatabase';\nimport { MinimalUserData } from '../../types';\nimport { Document } from '@bma98/firebase-db-manager';\n\nexport function subscribeForUser<T extends MinimalUserData, S>(\n    database: MinimalExpectedDatabase<T, S>,\n    id: string,\n    onFetchDone?: (newDocument?: Document<T, S>) => void\n): firebase.Unsubscribe {\n    return database.collections.users.subscribeToDocument(\n        id,\n        (newDocument) => {\n            if (onFetchDone) {\n                onFetchDone(newDocument);\n            }\n        },\n        (error) => {\n            alert(error.message);\n        },\n        () => {\n            if (onFetchDone) {\n                onFetchDone();\n            }\n        }\n    );\n}\n","import { useEffect, useState } from 'react';\nimport { useRecoilState, useSetRecoilState } from 'recoil';\nimport { authenticationAtom, useAuthenticatedUser, usersAtom } from './recoil';\nimport { subscribeForAuthenticatedUser } from './firebase/authentication/subscribeForAuthenticatedUser';\nimport { subscribeForUser } from './firebase/users/subscribeForUser';\nimport { MinimalExpectedDatabase, MinimalUserData } from './types';\n\ninterface Props<UserType extends MinimalUserData, UserSubCollection> {\n    database: MinimalExpectedDatabase<UserType, UserSubCollection>;\n    loadingComponent: JSX.Element;\n    authenticationComponent: JSX.Element;\n    userNotAvailableComponent: JSX.Element;\n    children: JSX.Element;\n}\n\nexport function Authenticate<UserType extends MinimalUserData, UserSubCollection>(props: Props<UserType, UserSubCollection>): JSX.Element {\n    const [authenticationState, setAuthenticationState] = useRecoilState(authenticationAtom);\n    const setUsers = useSetRecoilState(usersAtom);\n    const currentUser = useAuthenticatedUser();\n    const [loadingUserFromDatabase, setLoadingUserFromDatabase] = useState(true);\n    const { database } = props;\n\n    useEffect(() => {\n        const unsubscribe = subscribeForAuthenticatedUser((authState) => {\n            setAuthenticationState(authState);\n        });\n        return (): void => {\n            unsubscribe();\n        };\n    }, [setAuthenticationState]);\n\n    useEffect(() => {\n        let unsubscribe: firebase.Unsubscribe | undefined;\n        if (authenticationState.firebaseUser != null) {\n            unsubscribe = subscribeForUser(database, authenticationState.firebaseUser.uid, (document) => {\n                if (document != null) {\n                    setUsers((oldUsers) => oldUsers.set(document.id(), document));\n                }\n                setLoadingUserFromDatabase(false);\n            });\n        }\n        return (): void => {\n            if (unsubscribe) {\n                unsubscribe();\n            }\n        };\n    }, [authenticationState, database, setUsers]);\n\n    if (authenticationState.firebaseUser === undefined && authenticationState.loading) {\n        return props.loadingComponent;\n    } else if (authenticationState.firebaseUser === null && authenticationState.loading === false) {\n        return props.authenticationComponent;\n    } else {\n        if (loadingUserFromDatabase && currentUser == null) {\n            return props.loadingComponent;\n        } else {\n            if (currentUser == null) {\n                return props.userNotAvailableComponent;\n            } else {\n                return props.children;\n            }\n        }\n    }\n}\n","import * as firebase from 'firebase/app';\nimport { useState, useLayoutEffect } from 'react';\n\ninterface Config {\n    [key: string]: string;\n}\n\ninterface Props {\n    children: JSX.Element;\n    firebaseConfig: Config;\n    loadingComponent: JSX.Element;\n}\n\nexport function FirebaseInit(props: Props): JSX.Element {\n    const [firebaseReady, setFirebaseReady] = useState(false);\n    const { firebaseConfig } = props;\n\n    useLayoutEffect(() => {\n        firebase.initializeApp(firebaseConfig);\n        setFirebaseReady(true);\n    }, [firebaseConfig]);\n\n    return firebaseReady ? props.children : props.loadingComponent;\n}\n","import { MinimalExpectedDatabase } from '../../types/MinimalExpectedDatabase';\nimport { MinimalUserData } from '../../types';\nimport { Document } from '@bma98/firebase-db-manager';\n\nexport async function createUser<T extends MinimalUserData, S>(database: MinimalExpectedDatabase<T, S>, data: T): Promise<Document<T, S>> {\n    const userDocument = await database.collections.users.createDocument(data);\n    return userDocument;\n}\n","import { Database, Collection } from '@bma98/firebase-db-manager';\nimport { MinimalUserData } from './MinimalUser';\n\ntype UsersCollection<T extends MinimalUserData, S> = Collection<T, S>;\nexport type MinimalExpectedDatabase<T extends MinimalUserData, S> = Database<{ users: UsersCollection<T, S> }>;\n\nexport function isMinimalExpectedDatabase<T extends MinimalUserData, S>(value: unknown): value is MinimalExpectedDatabase<T, S> {\n    const casted = value as MinimalExpectedDatabase<T, S>;\n    return casted.collections.users != null;\n}\n","import { Document, IDEnabled } from '@bma98/firebase-db-manager';\n\nexport interface MinimalUserData extends IDEnabled {\n    email: string;\n}\n\nexport function isMinimalUserData(value: unknown): value is MinimalUserData {\n    const castedValue = value as MinimalUserData;\n    return castedValue.email != null;\n}\n\nexport type MinimalUser<T extends MinimalUserData, S> = Document<T, S>;\n","import * as firebase from 'firebase/app';\nimport 'firebase/auth';\nimport { AuthenticationState, createAuthenticationState } from '../../types/AuthenticationState';\n\nexport async function signIn(email: string, password: string): Promise<AuthenticationState> {\n    const userCredential = await firebase.auth().signInWithEmailAndPassword(email, password);\n    return createAuthenticationState({\n        firebaseUser: userCredential.user,\n        loading: false\n    });\n}\n","import * as firebase from 'firebase/app';\nimport 'firebase/auth';\nimport { AuthenticationState, createAuthenticationState } from '../../types/AuthenticationState';\n\nexport async function signOut(): Promise<AuthenticationState> {\n    await firebase.auth().signOut();\n    return createAuthenticationState({\n        loading: false\n    });\n}\n","import * as firebase from 'firebase/app';\nimport 'firebase/auth';\nimport { AuthenticationState, createAuthenticationState } from '../../types/AuthenticationState';\n\nexport async function signUp(email: string, password: string): Promise<AuthenticationState> {\n    const userCredential = await firebase.auth().createUserWithEmailAndPassword(email, password);\n    return createAuthenticationState({\n        firebaseUser: userCredential.user,\n        loading: false\n    });\n}\n","import { MinimalExpectedDatabase } from '../../types/MinimalExpectedDatabase';\nimport { MinimalUserData } from '../../types';\n\nexport async function updateUser<T extends MinimalUserData, S>(database: MinimalExpectedDatabase<T, S>, data: T): Promise<unknown> {\n    const userDocument = await database.collections.users.updateDocument(data);\n    return userDocument;\n}\n"],"names":["createAuthenticationState","values","produce","firebaseUser","undefined","loading","draft","Object","assign","authenticationAtom","atom","key","default","dangerouslyAllowMutability","usersAtom","Map","useAuthenticatedUser","users","useRecoilValue","auth","has","uid","get","subscribeForAuthenticatedUser","onFetch","firebase","onAuthStateChanged","user","error","alert","message","subscribeForUser","database","id","onFetchDone","collections","subscribeToDocument","newDocument","props","useRecoilState","authenticationState","setAuthenticationState","setUsers","useSetRecoilState","currentUser","useState","loadingUserFromDatabase","setLoadingUserFromDatabase","useEffect","unsubscribe","authState","document","oldUsers","set","loadingComponent","authenticationComponent","userNotAvailableComponent","children","firebaseReady","setFirebaseReady","firebaseConfig","useLayoutEffect","data","createDocument","value","email","password","signInWithEmailAndPassword","userCredential","signOut","createUserWithEmailAndPassword","updateDocument"],"mappings":"sJAQgBA,EAA0BC,GAUtC,OATuCC,EACnC,CACIC,kBAAcC,EACdC,SAAS,GAEb,SAACC,GACGC,OAAOC,OAAOF,EAAOL,8BCZpBQ,IAAAA,EAAqBC,OAA0B,CACxDC,IAAK,qBACLC,QAASZ,IACTa,4BAA4B,ICDnBC,EAAYJ,OAAK,CAC1BC,IAAK,YACLC,QAAS,IAAIG,eCDDC,IACZ,IAAMC,EAAQC,iBAAeJ,GACvBK,EAAOD,iBAAeT,GAC5B,GAAyB,MAArBU,EAAKhB,cAAwBc,EAAMG,IAAID,EAAKhB,aAAakB,KACzD,OAAOJ,EAAMK,IAAIH,EAAKhB,aAAakB,cCN3BE,EAA8BC,GAC1C,OAAOC,SAAgBC,mBACnB,SAACC,GACGH,EACIxB,EAA0B,CACtBG,aAAcwB,EACdtB,SAAS,MAIrB,SAACuB,GACGC,MAAMD,EAAME,oBCVRC,EACZC,EACAC,EACAC,GAEA,OAAOF,EAASG,YAAYlB,MAAMmB,oBAC9BH,EACA,SAACI,GACOH,GACAA,EAAYG,IAGpB,SAACT,GACGC,MAAMD,EAAME,UAEhB,WACQI,GACAA,oCCPkEI,SACxBC,iBAAe9B,GAA9D+B,OAAqBC,OACtBC,EAAWC,oBAAkB7B,GAC7B8B,EAAc5B,MAC0C6B,YAAS,GAAhEC,OAAyBC,OACxBf,EAAaM,EAAbN,SA4BR,OA1BAgB,YAAU,WACN,IAAMC,EAAc1B,EAA8B,SAAC2B,GAC/CT,EAAuBS,KAE3B,kBACID,MAEL,CAACR,IAEJO,YAAU,WACN,IAAIC,EASJ,OARwC,MAApCT,EAAoBrC,eACpB8C,EAAclB,EAAiBC,EAAUQ,EAAoBrC,aAAakB,IAAK,SAAC8B,GAC5D,MAAZA,GACAT,EAAS,SAACU,UAAaA,EAASC,IAAIF,EAASlB,KAAMkB,KAEvDJ,GAA2B,iBAI3BE,GACAA,MAGT,CAACT,EAAqBR,EAAUU,SAEMtC,IAArCoC,EAAoBrC,cAA8BqC,EAAoBnC,QAC/DiC,EAAMgB,iBAC+B,OAArCd,EAAoBrC,eAAyD,IAAhCqC,EAAoBnC,QACjEiC,EAAMiB,wBAETT,GAA0C,MAAfF,EACpBN,EAAMgB,iBAEM,MAAfV,EACON,EAAMkB,0BAENlB,EAAMmB,wCC9CAnB,SACiBO,YAAS,GAA5Ca,OAAeC,OACdC,EAAmBtB,EAAnBsB,eAOR,OALAC,kBAAgB,WACZpC,gBAAuBmC,GACvBD,GAAiB,IAClB,CAACC,IAEGF,EAAgBpB,EAAMmB,SAAWnB,EAAMgB,+GClBatB,EAAyC8B,8BACzE9B,EAASG,YAAYlB,MAAM8C,eAAeD,IADzE,2ERiBsCE,GAElC,OAA8B,MADVA,EACD3D,oDSjBiD2D,GAEpE,OAAmC,MADpBA,EACD7B,YAAYlB,0CCFI+C,GAE9B,OAA4B,MADRA,EACDC,+BCJMA,EAAeC,8BACXzC,SAAgB0C,2BAA2BF,EAAOC,kBAAzEE,GACN,OAAOpE,EAA0B,CAC7BG,aAAciE,EAAezC,KAC7BtB,SAAS,MAJjB,0FCCUoB,SAAgB4C,2BACtB,OAAOrE,EAA0B,CAC7BK,SAAS,MAHjB,4DCA6B4D,EAAeC,8BACXzC,SAAgB6C,+BAA+BL,EAAOC,kBAA7EE,GACN,OAAOpE,EAA0B,CAC7BG,aAAciE,EAAezC,KAC7BtB,SAAS,MAJjB,mICD+D2B,EAAyC8B,8BACzE9B,EAASG,YAAYlB,MAAMsD,eAAeT,IADzE"}