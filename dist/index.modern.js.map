{"version":3,"file":"index.modern.js","sources":["../src/types/AuthenticationState.ts","../src/types/MinimalUser.ts","../src/types/MinimalExpectedDatabase.ts","../src/atoms/authenticationAtom.ts","../src/atoms/usersAtom.ts","../src/firebase/authentication/subscribeForAuthenticatedUser.ts","../src/hooks/useSubscribeForAuthenticatedUser.ts","../src/firebase/users/subscribeForUser.ts","../src/hooks/useSubscribeForDatabaseUserObject.ts","../src/hooks/useAuthenticatedUser.tsx","../src/components/Authenticate.tsx","../src/components/FirebaseInit.tsx","../src/firebase/authentication/signIn.ts","../src/firebase/authentication/signOut.ts","../src/firebase/authentication/signUp.ts","../src/firebase/users/createUser.ts","../src/firebase/users/updateUser.ts"],"sourcesContent":["import * as firebase from 'firebase/app';\nimport produce from 'immer';\n\nexport interface AuthenticationState {\n    firebaseUser: firebase.User | undefined | null;\n    loading: boolean;\n}\n\nexport function createAuthenticationState(values?: Partial<AuthenticationState>): Readonly<AuthenticationState> {\n    const newObject: AuthenticationState = produce(\n        {\n            firebaseUser: undefined,\n            loading: true\n        },\n        (draft) => {\n            Object.assign(draft, values);\n        }\n    );\n    return newObject;\n}\n\nexport function isAuthenticationState(value: unknown): value is AuthenticationState {\n    const castedValue = value as AuthenticationState;\n    return castedValue.loading != null;\n}\n","import { Document, IDEnabled } from '@bma98/firebase-db-manager';\n\nexport interface MinimalUserData extends IDEnabled {\n    email: string;\n}\n\nexport function isMinimalUserData(value: unknown): value is MinimalUserData {\n    const castedValue = value as MinimalUserData;\n    return castedValue.email != null;\n}\n\nexport type MinimalUser<T extends MinimalUserData, S> = Document<T, S>;\n","import { Database, Collection } from '@bma98/firebase-db-manager';\nimport { MinimalUserData } from './MinimalUser';\n\ntype UsersCollection<T extends MinimalUserData, S> = Collection<T, S>;\nexport type MinimalExpectedDatabase<T extends MinimalUserData, S> = Database<{ users: UsersCollection<T, S> }>;\n\nexport function isMinimalExpectedDatabase<T extends MinimalUserData, S>(value: unknown): value is MinimalExpectedDatabase<T, S> {\n    const casted = value as MinimalExpectedDatabase<T, S>;\n    return casted.collections.users != null;\n}\n","import { atom } from 'recoil';\nimport { AuthenticationState, createAuthenticationState } from '../types';\n\nexport const authenticationAtom = atom<AuthenticationState>({\n    key: 'authenticationAtom',\n    default: createAuthenticationState(),\n    dangerouslyAllowMutability: true\n});\n","import { atom } from 'recoil';\nimport { MinimalUserData } from '../types/MinimalUser';\nimport { Document } from '@bma98/firebase-db-manager';\n\nexport const usersAtom = atom({\n    key: 'usersAtom',\n    default: new Map<string, Document<MinimalUserData, unknown>>()\n});\n","import * as firebase from 'firebase/app';\nimport 'firebase/auth';\nimport { AuthenticationState, createAuthenticationState } from '../../types/AuthenticationState';\n\nexport function subscribeForAuthenticatedUser(onFetch: (state: AuthenticationState) => void): firebase.Unsubscribe {\n    return firebase.auth().onAuthStateChanged(\n        (user) => {\n            onFetch(\n                createAuthenticationState({\n                    firebaseUser: user,\n                    loading: false\n                })\n            );\n        },\n        (error) => {\n            alert(error.message);\n        }\n    );\n}\n","import { useEffect } from 'react';\nimport { useRecoilState } from 'recoil';\nimport { subscribeForAuthenticatedUser } from '../firebase/authentication/subscribeForAuthenticatedUser';\nimport { authenticationAtom } from '../atoms/authenticationAtom';\nimport { AuthenticationState } from '../types/AuthenticationState';\n\nexport function useSubscribeForAuthenticatedUser(): AuthenticationState {\n    const [authenticationState, setAuthenticationState] = useRecoilState(authenticationAtom);\n    useEffect(() => {\n        const unsubscribe = subscribeForAuthenticatedUser((authState) => {\n            setAuthenticationState(authState);\n        });\n        return (): void => {\n            unsubscribe();\n        };\n    }, [setAuthenticationState]);\n    return authenticationState;\n}\n","import firebase from 'firebase/app';\nimport { MinimalExpectedDatabase } from '../../types/MinimalExpectedDatabase';\nimport { MinimalUserData } from '../../types';\nimport { Document } from '@bma98/firebase-db-manager';\n\nexport function subscribeForUser<T extends MinimalUserData, S>(\n    database: MinimalExpectedDatabase<T, S>,\n    id: string,\n    onFetchDone?: (newDocument?: Document<T, S>) => void\n): firebase.Unsubscribe {\n    return database.collections.users.subscribeToDocument(\n        id,\n        (newDocument) => {\n            if (onFetchDone) {\n                onFetchDone(newDocument);\n            }\n        },\n        (error) => {\n            alert(error.message);\n        },\n        () => {\n            if (onFetchDone) {\n                onFetchDone();\n            }\n        }\n    );\n}\n","import { useEffect, useState } from 'react';\nimport { subscribeForUser } from '../firebase/users/subscribeForUser';\nimport { AuthenticationState, MinimalUserData, MinimalExpectedDatabase } from '../types';\nimport { useSetRecoilState } from 'recoil';\nimport { usersAtom } from '../atoms/usersAtom';\n\nexport function useSubscribeForDatabaseUserObject<T extends MinimalUserData, S>(\n    authenticationState: AuthenticationState,\n    database: MinimalExpectedDatabase<T, S>\n): boolean {\n    const setUsers = useSetRecoilState(usersAtom);\n    const [loadingUserFromDatabase, setLoadingUserFromDatabase] = useState(true);\n\n    useEffect(() => {\n        let unsubscribe: firebase.Unsubscribe | undefined;\n        if (authenticationState.firebaseUser != null) {\n            unsubscribe = subscribeForUser(database, authenticationState.firebaseUser.uid, (document) => {\n                if (document != null) {\n                    setUsers((oldUsers) => oldUsers.set(document.id(), document));\n                }\n                setLoadingUserFromDatabase(false);\n            });\n        }\n        return (): void => {\n            if (unsubscribe) {\n                unsubscribe();\n            }\n        };\n    }, [authenticationState, database, setUsers]);\n\n    return loadingUserFromDatabase;\n}\n","import { useRecoilValue } from 'recoil';\nimport { usersAtom } from '../atoms/usersAtom';\nimport { authenticationAtom } from '../atoms/authenticationAtom';\nimport { MinimalUserData } from '..';\nimport { Document } from '@bma98/firebase-db-manager';\n\nexport function useAuthenticatedUser<T extends MinimalUserData, S>(): Document<T, S> | undefined {\n    const users = useRecoilValue(usersAtom);\n    const auth = useRecoilValue(authenticationAtom);\n    if (auth.firebaseUser != null && users.has(auth.firebaseUser.uid)) {\n        return users.get(auth.firebaseUser.uid) as Document<T, S>;\n    }\n    return undefined;\n}\n","import { MinimalExpectedDatabase, MinimalUserData } from '../types';\nimport { useSubscribeForAuthenticatedUser, useSubscribeForDatabaseUserObject, useAuthenticatedUser } from '../hooks';\n\ninterface Props<UserType extends MinimalUserData, UserSubCollection> {\n    database: MinimalExpectedDatabase<UserType, UserSubCollection>;\n    loadingComponent: JSX.Element;\n    authenticationComponent: JSX.Element;\n    userNotAvailableComponent: JSX.Element;\n    children: JSX.Element;\n}\n\nexport function Authenticate<UserType extends MinimalUserData, UserSubCollection>(props: Props<UserType, UserSubCollection>): JSX.Element {\n    const { database } = props;\n    const authenticationState = useSubscribeForAuthenticatedUser();\n    const loadingUserFromDatabase = useSubscribeForDatabaseUserObject(authenticationState, database);\n    const currentUser = useAuthenticatedUser();\n\n    if (authenticationState.firebaseUser === undefined && authenticationState.loading) {\n        return props.loadingComponent;\n    } else if (authenticationState.firebaseUser === null && authenticationState.loading === false) {\n        return props.authenticationComponent;\n    } else {\n        if (loadingUserFromDatabase && currentUser == null) {\n            return props.loadingComponent;\n        } else {\n            if (currentUser == null) {\n                return props.userNotAvailableComponent;\n            } else {\n                return props.children;\n            }\n        }\n    }\n}\n","import * as firebase from 'firebase/app';\nimport React, { useState, useLayoutEffect } from 'react';\n\nconst FirebaseContext = React.createContext<firebase.app.App | undefined>(undefined);\n\ninterface Config {\n    [key: string]: string;\n}\n\ninterface Props {\n    children: JSX.Element;\n    firebaseConfig: Config;\n    loadingComponent: JSX.Element;\n}\n\nexport function FirebaseInit(props: Props): JSX.Element {\n    const [app, setApp] = useState<firebase.app.App | undefined>(undefined);\n    const { firebaseConfig } = props;\n\n    useLayoutEffect(() => {\n        setApp(firebase.initializeApp(firebaseConfig));\n    }, [firebaseConfig]);\n\n    return <FirebaseContext.Provider value={app}>{app != null ? props.children : props.loadingComponent}</FirebaseContext.Provider>;\n}\n","import * as firebase from 'firebase/app';\nimport 'firebase/auth';\nimport { AuthenticationState, createAuthenticationState } from '../../types/AuthenticationState';\n\nexport async function signIn(email: string, password: string): Promise<AuthenticationState> {\n    const userCredential = await firebase.auth().signInWithEmailAndPassword(email, password);\n    return createAuthenticationState({\n        firebaseUser: userCredential.user,\n        loading: false\n    });\n}\n","import * as firebase from 'firebase/app';\nimport 'firebase/auth';\nimport { AuthenticationState, createAuthenticationState } from '../../types/AuthenticationState';\n\nexport async function signOut(): Promise<AuthenticationState> {\n    await firebase.auth().signOut();\n    return createAuthenticationState({\n        loading: false\n    });\n}\n","import * as firebase from 'firebase/app';\nimport 'firebase/auth';\nimport { AuthenticationState, createAuthenticationState } from '../../types/AuthenticationState';\n\nexport async function signUp(email: string, password: string): Promise<AuthenticationState> {\n    const userCredential = await firebase.auth().createUserWithEmailAndPassword(email, password);\n    return createAuthenticationState({\n        firebaseUser: userCredential.user,\n        loading: false\n    });\n}\n","import { MinimalExpectedDatabase } from '../../types/MinimalExpectedDatabase';\nimport { MinimalUserData } from '../../types';\nimport { Document } from '@bma98/firebase-db-manager';\n\nexport async function createUser<T extends MinimalUserData, S>(database: MinimalExpectedDatabase<T, S>, data: T): Promise<Document<T, S>> {\n    const userDocument = await database.collections.users.createDocument(data);\n    return userDocument;\n}\n","import { MinimalExpectedDatabase } from '../../types/MinimalExpectedDatabase';\nimport { MinimalUserData } from '../../types';\n\nexport async function updateUser<T extends MinimalUserData, S>(database: MinimalExpectedDatabase<T, S>, data: T): Promise<unknown> {\n    const userDocument = await database.collections.users.updateDocument(data);\n    return userDocument;\n}\n"],"names":["createAuthenticationState","values","produce","firebaseUser","undefined","loading","draft","Object","assign","isAuthenticationState","value","isMinimalUserData","email","isMinimalExpectedDatabase","collections","users","authenticationAtom","atom","key","default","dangerouslyAllowMutability","usersAtom","Map","subscribeForAuthenticatedUser","onFetch","firebase","onAuthStateChanged","user","error","alert","message","useSubscribeForAuthenticatedUser","useRecoilState","authenticationState","setAuthenticationState","useEffect","unsubscribe","authState","subscribeForUser","database","id","onFetchDone","subscribeToDocument","newDocument","useSubscribeForDatabaseUserObject","setUsers","useSetRecoilState","useState","loadingUserFromDatabase","setLoadingUserFromDatabase","uid","document","oldUsers","set","useAuthenticatedUser","useRecoilValue","auth","has","get","Authenticate","props","currentUser","loadingComponent","authenticationComponent","userNotAvailableComponent","children","FirebaseContext","React","createContext","FirebaseInit","app","setApp","firebaseConfig","useLayoutEffect","Provider","signIn","password","signInWithEmailAndPassword","userCredential","signOut","signUp","createUserWithEmailAndPassword","createUser","data","createDocument","updateUser","updateDocument"],"mappings":"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"}