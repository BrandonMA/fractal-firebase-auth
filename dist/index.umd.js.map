{"version":3,"file":"index.umd.js","sources":["../src/types/AuthenticationState.ts","../src/recoil/authenticationAtom.ts","../src/recoil/usersAtom.ts","../src/recoil/currentUserSelector.ts","../src/firebase/authentication/subscribeForAuthenticatedUser.ts","../src/Authenticate.tsx","../src/firebase/users/subscribeForUser.ts","../src/FirebaseInit.tsx","../src/firebase/users/createUser.ts","../src/types/MinimalExpectedDatabase.ts","../src/types/MinimalUser.ts","../src/firebase/authentication/signIn.ts","../src/firebase/authentication/signOut.ts","../src/firebase/authentication/signUp.ts"],"sourcesContent":["import * as firebase from 'firebase/app';\nimport produce from 'immer';\n\nexport interface AuthenticationState {\n    firebaseUser: firebase.User | undefined | null;\n    loading: boolean;\n}\n\nexport function createAuthenticationState(values?: Partial<AuthenticationState>): Readonly<AuthenticationState> {\n    const newObject: AuthenticationState = produce(\n        {\n            firebaseUser: undefined,\n            loading: true\n        },\n        (draft) => {\n            Object.assign(draft, values);\n        }\n    );\n    return newObject;\n}\n\nexport function isAuthenticationState(value: unknown): value is AuthenticationState {\n    const castedValue = value as AuthenticationState;\n    return castedValue.loading != null;\n}\n","import { atom } from 'recoil';\nimport { AuthenticationState, createAuthenticationState } from '../types';\n\nexport const authenticationAtom = atom<AuthenticationState>({\n    key: 'authenticationAtom',\n    default: createAuthenticationState()\n});\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { atom } from 'recoil';\nimport { MinimalUserData } from '../types/MinimalUser';\nimport { Document } from '@bma98/firebase-db-manager';\n\nexport const usersAtom = atom({\n    key: 'usersAtom',\n    default: new Map<string, Document<MinimalUserData, any>>()\n});\n","import { selector } from 'recoil';\nimport { usersAtom } from './usersAtom';\nimport { authenticationAtom } from './authenticationAtom';\n\nexport const currentUserSelector = selector({\n    key: 'currentUserSelector',\n    get: ({ get }) => {\n        const auth = get(authenticationAtom);\n        const users = get(usersAtom);\n        if (auth.firebaseUser != null) {\n            return users.get(auth.firebaseUser.uid);\n        }\n        return undefined;\n    }\n});\n","import * as firebase from 'firebase/app';\nimport 'firebase/auth';\nimport { AuthenticationState, createAuthenticationState } from '../../types/AuthenticationState';\n\nexport function subscribeForAuthenticatedUser(onFetch: (state: AuthenticationState) => void): firebase.Unsubscribe {\n    return firebase.auth().onAuthStateChanged(\n        (user) => {\n            onFetch(\n                createAuthenticationState({\n                    firebaseUser: user,\n                    loading: false\n                })\n            );\n        },\n        (error) => {\n            alert(error.message);\n        }\n    );\n}\n","import { useEffect, useState } from 'react';\nimport { useRecoilValue, useRecoilState, useSetRecoilState } from 'recoil';\nimport { authenticationAtom, currentUserSelector, usersAtom } from './recoil';\nimport { subscribeForAuthenticatedUser } from './firebase/authentication/subscribeForAuthenticatedUser';\nimport { subscribeForUser } from './firebase/users/subscribeForUser';\nimport { MinimalExpectedDatabase, MinimalUserData } from './types';\n\ninterface Props<UserType extends MinimalUserData, UserSubCollection> {\n    database: MinimalExpectedDatabase<UserType, UserSubCollection>;\n    loadingComponent: JSX.Element;\n    authenticationComponent: JSX.Element;\n    userNotAvailableComponent: JSX.Element;\n    children: JSX.Element;\n}\n\nexport function Authenticate<UserType extends MinimalUserData, UserSubCollection>(props: Props<UserType, UserSubCollection>): JSX.Element {\n    const [authenticationState, setAuthenticationState] = useRecoilState(authenticationAtom);\n    const setUsers = useSetRecoilState(usersAtom);\n    const currentUser = useRecoilValue(currentUserSelector);\n    const [loadingUserFromDatabase, setLoadingUserFromDatabase] = useState(true);\n    const { database } = props;\n\n    useEffect(() => {\n        const unsubscribe = subscribeForAuthenticatedUser((authState) => {\n            setAuthenticationState(authState);\n        });\n        return (): void => {\n            unsubscribe();\n        };\n    }, [setAuthenticationState]);\n\n    useEffect(() => {\n        let unsubscribe: firebase.Unsubscribe | undefined;\n        if (authenticationState.firebaseUser != null) {\n            unsubscribe = subscribeForUser(database, authenticationState.firebaseUser.uid, (document) => {\n                if (document != null) {\n                    setUsers((oldUsers) => oldUsers.set(document.id(), document));\n                }\n                setLoadingUserFromDatabase(false);\n            });\n        }\n        return (): void => {\n            if (unsubscribe) {\n                unsubscribe();\n            }\n        };\n    }, [authenticationState, database, setUsers]);\n\n    if (authenticationState.firebaseUser === undefined && authenticationState.loading) {\n        return props.loadingComponent;\n    } else if (authenticationState.firebaseUser === null && authenticationState.loading === false) {\n        return props.authenticationComponent;\n    } else {\n        if (loadingUserFromDatabase && currentUser == null) {\n            return props.loadingComponent;\n        } else {\n            if (currentUser == null) {\n                return props.userNotAvailableComponent;\n            } else {\n                return props.children;\n            }\n        }\n    }\n}\n","import firebase from 'firebase/app';\nimport { MinimalExpectedDatabase } from '../../types/MinimalExpectedDatabase';\nimport { MinimalUserData } from '../../types';\nimport { Document } from '@bma98/firebase-db-manager';\n\nexport function subscribeForUser<T extends MinimalUserData, S>(\n    database: MinimalExpectedDatabase<T, S>,\n    id: string,\n    onFetchDone?: (newDocument?: Document<T, S>) => void\n): firebase.Unsubscribe {\n    return database.collections.users.subscribeToDocument(\n        id,\n        (newDocument) => {\n            if (onFetchDone) {\n                onFetchDone(newDocument);\n            }\n        },\n        (error) => {\n            alert(error.message);\n        },\n        () => {\n            if (onFetchDone) {\n                onFetchDone();\n            }\n        }\n    );\n}\n","import * as firebase from 'firebase/app';\nimport { useState, useEffect } from 'react';\n\ninterface Config {\n    [key: string]: string;\n}\n\ninterface Props {\n    children: JSX.Element;\n    firebaseConfig: Config;\n    loadingComponent: JSX.Element;\n}\n\nexport function FirebaseInit(props: Props): JSX.Element {\n    const [firebaseReady, setFirebaseReady] = useState(false);\n    const { firebaseConfig } = props;\n\n    useEffect(() => {\n        firebase.initializeApp(firebaseConfig);\n        setFirebaseReady(true);\n    }, [firebaseConfig]);\n\n    return firebaseReady ? props.children : props.loadingComponent;\n}\n","import { MinimalExpectedDatabase } from '../../types/MinimalExpectedDatabase';\nimport { MinimalUserData } from '../../types';\nimport { Document } from '@bma98/firebase-db-manager';\n\nexport async function createUser<T extends MinimalUserData, S>(database: MinimalExpectedDatabase<T, S>, data: T): Promise<Document<T, S>> {\n    const userDocument = await database.collections.users.createDocument(data);\n    return userDocument;\n}\n","import { Database, Collection } from '@bma98/firebase-db-manager';\nimport { MinimalUserData } from './MinimalUser';\n\ntype UsersCollection<T extends MinimalUserData, S> = Collection<T, S>;\nexport type MinimalExpectedDatabase<T extends MinimalUserData, S> = Database<{ users: UsersCollection<T, S> }>;\n\nexport function isMinimalExpectedDatabase<T extends MinimalUserData, S>(value: unknown): value is MinimalExpectedDatabase<T, S> {\n    const casted = value as MinimalExpectedDatabase<T, S>;\n    return casted.collections.users != null;\n}\n","import { Document, IDEnabled } from '@bma98/firebase-db-manager';\n\nexport interface MinimalUserData extends IDEnabled {\n    email: string;\n}\n\nexport function isMinimalUserData(value: unknown): value is MinimalUserData {\n    const castedValue = value as MinimalUserData;\n    return castedValue.email != null;\n}\n\nexport type MinimalUser<T extends MinimalUserData, S> = Document<T, S>;\n","import * as firebase from 'firebase/app';\nimport 'firebase/auth';\nimport { AuthenticationState, createAuthenticationState } from '../../types/AuthenticationState';\n\nexport async function signIn(email: string, password: string): Promise<AuthenticationState> {\n    const userCredential = await firebase.auth().signInWithEmailAndPassword(email, password);\n    return createAuthenticationState({\n        firebaseUser: userCredential.user,\n        loading: false\n    });\n}\n","import * as firebase from 'firebase/app';\nimport 'firebase/auth';\nimport { AuthenticationState, createAuthenticationState } from '../../types/AuthenticationState';\n\nexport async function signOut(): Promise<AuthenticationState> {\n    await firebase.auth().signOut();\n    return createAuthenticationState({\n        loading: false\n    });\n}\n","import * as firebase from 'firebase/app';\nimport 'firebase/auth';\nimport { AuthenticationState, createAuthenticationState } from '../../types/AuthenticationState';\n\nexport async function signUp(email: string, password: string): Promise<AuthenticationState> {\n    const userCredential = await firebase.auth().createUserWithEmailAndPassword(email, password);\n    return createAuthenticationState({\n        firebaseUser: userCredential.user,\n        loading: false\n    });\n}\n"],"names":["createAuthenticationState","values","produce","firebaseUser","undefined","loading","draft","Object","assign","authenticationAtom","atom","key","default","usersAtom","Map","currentUserSelector","selector","get","auth","users","uid","subscribeForAuthenticatedUser","onFetch","firebase","onAuthStateChanged","user","error","alert","message","props","useRecoilState","authenticationState","setAuthenticationState","setUsers","useSetRecoilState","currentUser","useRecoilValue","useState","loadingUserFromDatabase","setLoadingUserFromDatabase","database","useEffect","unsubscribe","authState","id","onFetchDone","collections","subscribeToDocument","newDocument","subscribeForUser","document","oldUsers","set","loadingComponent","authenticationComponent","userNotAvailableComponent","children","firebaseReady","setFirebaseReady","firebaseConfig","data","createDocument","value","email","password","signInWithEmailAndPassword","userCredential","signOut","createUserWithEmailAndPassword"],"mappings":"mZAQgBA,EAA0BC,GAUtC,OATuCC,EACnC,CACIC,kBAAcC,EACdC,SAAS,GAEb,SAACC,GACGC,OAAOC,OAAOF,EAAOL,4ECZpBQ,EAAqBC,OAA0B,CACxDC,IAAK,qBACLC,QAASZ,MCAAa,EAAYH,OAAK,CAC1BC,IAAK,YACLC,QAAS,IAAIE,MCHJC,EAAsBC,WAAS,CACxCL,IAAK,sBACLM,IAAK,gBAAGA,IAAAA,IACEC,EAAOD,EAAIR,GACXU,EAAQF,EAAIJ,GAClB,GAAyB,MAArBK,EAAKf,aACL,OAAOgB,EAAMF,IAAIC,EAAKf,aAAaiB,iBCN/BC,EAA8BC,GAC1C,OAAOC,SAAgBC,mBACnB,SAACC,GACGH,EACItB,EAA0B,CACtBG,aAAcsB,EACdpB,SAAS,MAIrB,SAACqB,GACGC,MAAMD,EAAME,mCCA0DC,SACxBC,iBAAerB,GAA9DsB,OAAqBC,OACtBC,EAAWC,oBAAkBrB,GAC7BsB,EAAcC,iBAAerB,KAC2BsB,YAAS,GAAhEC,OAAyBC,OACxBC,EAAaX,EAAbW,SA4BR,OA1BAC,YAAU,WACN,IAAMC,EAAcrB,EAA8B,SAACsB,GAC/CX,EAAuBW,KAE3B,kBACID,MAEL,CAACV,IAEJS,YAAU,WACN,IAAIC,EASJ,OARwC,MAApCX,EAAoB5B,eACpBuC,WC5BRF,EACAI,EACAC,GAEA,OAAOL,EAASM,YAAY3B,MAAM4B,oBAC9BH,EACA,SAACI,GACOH,GACAA,EAAYG,IAGpB,SAACtB,GACGC,MAAMD,EAAME,UAEhB,WACQiB,GACAA,MDYUI,CAAiBT,EAAUT,EAAoB5B,aAAaiB,IAAK,SAAC8B,GAC5D,MAAZA,GACAjB,EAAS,SAACkB,UAAaA,EAASC,IAAIF,EAASN,KAAMM,KAEvDX,GAA2B,iBAI3BG,GACAA,MAGT,CAACX,EAAqBS,EAAUP,SAEM7B,IAArC2B,EAAoB5B,cAA8B4B,EAAoB1B,QAC/DwB,EAAMwB,iBAC+B,OAArCtB,EAAoB5B,eAAyD,IAAhC4B,EAAoB1B,QACjEwB,EAAMyB,wBAEThB,GAA0C,MAAfH,EACpBN,EAAMwB,iBAEM,MAAflB,EACON,EAAM0B,0BAEN1B,EAAM2B,kCE9CA3B,SACiBQ,YAAS,GAA5CoB,OAAeC,OACdC,EAAmB9B,EAAnB8B,eAOR,OALAlB,YAAU,WACNlB,gBAAuBoC,GACvBD,GAAiB,IAClB,CAACC,IAEGF,EAAgB5B,EAAM2B,SAAW3B,EAAMwB,6FClBab,EAAyCoB,8BACzEpB,EAASM,YAAY3B,MAAM0C,eAAeD,IADzE,6FRiBsCE,GAElC,OAA8B,MADVA,EACDzD,8CSjBiDyD,GAEpE,OAAmC,MADpBA,EACDhB,YAAY3B,oCCFI2C,GAE9B,OAA4B,MADRA,EACDC,yBCJMA,EAAeC,8BACXzC,SAAgB0C,2BAA2BF,EAAOC,kBAAzEE,GACN,OAAOlE,EAA0B,CAC7BG,aAAc+D,EAAezC,KAC7BpB,SAAS,MAJjB,oFCCUkB,SAAgB4C,2BACtB,OAAOnE,EAA0B,CAC7BK,SAAS,MAHjB,sDCA6B0D,EAAeC,8BACXzC,SAAgB6C,+BAA+BL,EAAOC,kBAA7EE,GACN,OAAOlE,EAA0B,CAC7BG,aAAc+D,EAAezC,KAC7BpB,SAAS,MAJjB"}